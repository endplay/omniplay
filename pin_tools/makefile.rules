##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################

SDEV=../test
TAINTS_LIB=taints
REPLAY_LIB += $(SDEV)/libutil.a
TOOL_LIBS += $(SDEV)/libutil.a
TOOL_CXXFLAGS += -I$(SDEV)
GLIB_INCLUDES=-I/usr/include/glib-2.0 -I/usr/lib/i386-linux-gnu/glib-2.0/include
GLIB_LIB= -lglib-2.0
TOOL_CXXFLAGS += $(GLIB_INCLUDES) -I$(SDEV) -g
MY_OBJS=$(OBJDIR)xray_token$(OBJ_SUFFIX)

##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := print_instructions race_checker print_output

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := interpret_tokens parse_result parse_filenames parse_tokens parse_xoutput

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS := xray_token

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.
$(OBJDIR)taints_glib_hash$(OBJ_SUFFIX): $(TAINTS_LIB)/taints_glib_hash.c $(TAINTS_LIB)/taints.h
	$(APP_CC) -c -o $(OBJDIR)taints$(OBJ_SUFFIX) $(TAINTS_LIB)/taints_glib_hash.c $(GLIB_INCLUDES)

$(OBJDIR)xray_token$(OBJ_SUFFIX): xray_token.h xray_token.c
	$(APP_CC) -Wall -Werror -g -c -o $(OBJDIR)xray_token$(OBJ_SUFFIX) $(GLIB_INCLUDES) xray_token.c $(GLIB_LIB)

$(OBJDIR)interpret_tokens$(EXE_SUFFIX): interpret_tokens.c xray_token.h
	$(APP_CC) -Wall -Werror -g -o $(OBJDIR)interpret_tokens $(OBJDIR)xray_token$(OBJ_SUFFIX) $(GLIB_INCLUDES) interpret_tokens.c $(GLIB_LIB)

$(OBJDIR)parse_result$(EXE_SUFFIX): parse_result.c
	$(APP_CC) -Wall -Werror -g -o $(OBJDIR)parse_result $(OBJDIR)xray_token$(OBJ_SUFFIX) parse_result.c $(GLIB_INCLUDES) $(GLIB_LIB)

$(OBJDIR)parse_filenames$(EXE_SUFFIX): parse_filenames.c
	$(APP_CC) -Wall -Werror -g -o $(OBJDIR)parse_filenames $(OBJDIR)xray_token$(OBJ_SUFFIX) parse_filenames.c $(GLIB_INCLUDES) $(GLIB_LIB)

$(OBJDIR)parse_tokens$(EXE_SUFFIX): parse_tokens.c xray_token.h
	$(APP_CC) -Wall -Werror -g -o $(OBJDIR)parse_tokens $(OBJDIR)xray_token$(OBJ_SUFFIX) parse_tokens.c $(GLIB_INCLUDES) $(GLIB_LIB)

$(OBJDIR)parse_xoutput$(EXE_SUFFIX): parse_xoutput.c trace_x.h xray_token.h
	$(APP_CC) -Wall -Werror -g -o $(OBJDIR)parse_xoutput $(OBJDIR)xray_token$(OBJ_SUFFIX) parse_xoutput.c $(GLIB_INCLUDES) $(GLIB_LIB)

# Pintools
$(OBJDIR)print_instructions$(OBJ_SUFFIX): print_instructions.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $< 

$(OBJDIR)print_instructions$(PINTOOL_SUFFIX): $(OBJDIR)print_instructions$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS) -lglib-2.0

$(OBJDIR)io$(OBJ_SUFFIX): io.cpp xray_monitor.h
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)io$(PINTOOL_SUFFIX): $(OBJDIR)io$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

$(OBJDIR)xio$(OBJ_SUFFIX): io.cpp xray_monitor.h
	$(CXX) -DONLY_X $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)xio$(PINTOOL_SUFFIX): $(OBJDIR)xio$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

# Copy linkage tool with replay support
$(OBJDIR)linkage_copy$(OBJ_SUFFIX): linkage.cpp $(TAINTS_LIB)/taints_copy.h
	$(CXX) -DHAVE_REPLAY -DCOPY_ONLY -DLINKAGE_DATA $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)linkage_copy$(PINTOOL_SUFFIX): $(OBJDIR)linkage_copy$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS) $(MY_OBJS) -lglib-2.0

# Copy linkage tool without replay support
$(OBJDIR)linkage_copy_nr$(OBJ_SUFFIX): linkage.cpp $(TAINTS_LIB)/taints_copy.h
	$(CXX) -DCOPY_ONLY -DLINKAGE_DATA $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)linkage_copy_nr$(PINTOOL_SUFFIX): $(OBJDIR)linkage_copy_nr$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS) $(MY_OBJS) -lglib-2.0

# Data linkage tool with replay support
$(OBJDIR)linkage_data$(OBJ_SUFFIX): linkage.cpp $(TAINTS_LIB)/taints_graph.h $(TAINTS_LIB)/slab_alloc.h
	$(CXX) -DHAVE_REPLAY -DLINKAGE_COPY -DLINKAGE_DATA $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)linkage_data$(PINTOOL_SUFFIX): $(OBJDIR)linkage_data$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $(MY_OBJS) $^ $(TOOL_LPATHS) $(TOOL_LIBS) -lglib-2.0

# Data+Indexing linkage tool with replay support
$(OBJDIR)linkage_data_offset$(OBJ_SUFFIX): linkage.cpp $(TAINTS_LIB)/taints_graph.h $(TAINTS_LIB)/slab_alloc.h
	$(CXX) -DHAVE_REPLAY -DLINKAGE_COPY -DLINKAGE_DATA -DLINKAGE_DATA_OFFSET $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)linkage_data_offset$(PINTOOL_SUFFIX): $(OBJDIR)linkage_data_offset$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS) $(MY_OBJS) -lglib-2.0

# Data linkage tool without replay support
$(OBJDIR)linkage_data_nr$(OBJ_SUFFIX): linkage.cpp $(TAINTS_LIB)/taints_graph.h $(TAINTS_LIB)/slab_alloc.h
	$(CXX) -DLINKAGE_DATA $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)linkage_data_nr$(PINTOOL_SUFFIX): $(OBJDIR)linkage_data_nr$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS) $(MY_OBJS) -lglib-2.0

# ConfAid (no replay support), linkages: copy, data, control flow, syscall abstraction
$(OBJDIR)confaid$(OBJ_SUFFIX): linkage.cpp
	$(CXX) -DCONFAID -DLINKAGE_COPY -DLINKAGE_DATA -DCTRL_FLOW -DLINKAGE_SYSCALL $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

#$(OBJDIR)confaid$(PINTOOL_SUFFIX): $(OBJDIR)confaid$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS) -lglib-2.0


$(OBJDIR)print_output$(OBJ_SUFFIX): print_output.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $< 

$(OBJDIR)print_output$(PINTOOL_SUFFIX): $(OBJDIR)print_output$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS) -lglib-2.0
